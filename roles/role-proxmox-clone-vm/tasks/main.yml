---
# Clone New VM from template in Proxmox
- name: Cloning virtual machine from "{{ VM_template }}" with name "{{ VM_name }}"
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_password: "{{ vault_api_password }}"
    api_host: "TheIntersect"
    name: "{{ VM_name }}"
    node: "TheIntersect"
    storage: "biglocal"
    clone: "{{ VM_template }}"
    timeout: 300
  tags: provision,test

- name: Waiting to apply cloud init changes in disk
  wait_for:
    timeout: 5
  tags: provision

- name: Start the VM
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_password: "{{ vault_api_password }}"
    api_host: "TheIntersect"
    name: "{{ VM_name }}"
    node: "TheIntersect"
    storage: "biglocal"
    state: started
    timeout: 300
  register: wait
  tags: provision

- name: Waiting to start VM completely
  wait_for:
    timeout: 45
  when: wait.changed == true
  tags: provision

- name: Getting the VM state
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_password: "{{ vault_api_password }}"
    api_host: "TheIntersect"
    name: "{{ VM_name }}"
    node: "TheIntersect"
    storage: "biglocal"
    state: current
  register: _current_state

- name: Return VM details
  debug:
    var: _current_state

- name: Get New VM ID
  set_fact:
    _vmid: "{{ _current_state.msg | regex_search(regexp,'\\1') | first }}"
  vars:
    regexp: 'vmid = (\d*)'

- name: Display VM ID
  debug:
    var: _vmid

- name: get IP
  shell: "/usr/sbin/qm guest cmd {{ _vmid }} network-get-interfaces"
  become: True
  # args:
  #   executable: /bin/bash
  register: _output_vm_ip

- name: Display VM IP
  debug:
    var: _output_vm_id