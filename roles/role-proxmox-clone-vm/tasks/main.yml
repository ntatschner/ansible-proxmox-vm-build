---
# Clone New VM from template in Proxmox
- name: Cloning virtual machine from "{{ VM_template }}" with name "{{ VM_name }}"
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_token_id: "{{ vault_proxmox_token_id }}"
    api_token_secret: "{{ vault_proxmox_api_key }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ VM_name }}"
    node: "{{ proxmox_host }}"
    clone: "{{ VM_template }}"
    timeout: 300
  tags: provission,test

- name: Increasing disk if it is necessary
  shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm resize $A {{ default_disk }} +{{ VM_INCREASE_DISK }}G
  when: '"{{ VM_INCREASE_DISK }}" != "0"'
  tags: provission

- name: Waiting to apply cloud init changes in disk
  wait_for:
    timeout: 5
  tags: provission

- name: starting new Virtual Machine to change IPv4 configuration, it is necessary
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_token_id: "{{ vault_proxmox_token_id }}"
    api_token_secret: "{{ vault_proxmox_api_key }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ VM_name }}"
    node: "{{ proxmox_host }}"
    state: started
    timeout: 300
  when: '"{{ VM_INCREASE_DISK }}" != "0"'
  register: wait
  tags: provission

- name: Waiting to start virtual server machine completely
  wait_for:
    timeout: 45
  when: wait.changed == true
  tags: provission

- name: Resize disk
  shell: growpart "{{ default_volume }}" "{{ default_partition }}"; pvresize "{{ default_volume }}""{{ default_partition }}"
  when: '"{{ VM_INCREASE_DISK }}" != "0"'
  delegate_to: "{{ template_name }}"
  tags: provission

- name: stopping new Virtual Machine to change IPv4 configuration, it is necessary
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_token_id: "{{ vault_proxmox_token_id }}"
    api_token_secret: "{{ vault_proxmox_api_key }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ VM_name }}"
    node: "{{ proxmox_host }}"
    state: stopped
    timeout: 300
  when: '"{{ VM_network }}" != "vlan10" or "{{ VM_INCREASE_DISK }}" != "0"'
  tags: provission

- name: Loading set up for Virtual Machine. Assigning correct bridge in network interface
  shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A — net0 'virtio,bridge=vmbr{{ item.value.vmbr }}'
  when: '"{{ VM_network }}" != "vlan10"'
  with_dict: "{{ vars[VM_network] }}"
  tags: provission

- debug:
    msg: "item.key {{ item.key }} item.value {{ item.value }} item.value.netmask {{ item.value.netmask }} item.value.vmbr {{ item.value.vmbr }}"
  with_dict: "{{ vars[VM_network] }}"
  tags: provission

- name: Loading set up for Virtual Machine. Assigning IP, sockets, cores and memory for Virtual Machine
  shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A — ipconfig0 'ip={{ VM_IP }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' — nameserver '{{ item.value.dnsservers }}' — searchdomain '{{ item.value.searchdomain }}' — memory '{{ VM_memory }}' — sockets '{{ VM_sockets }}' — cores '{{ VM_cores }}'
  when: '"{{ VM_IP }}" != "automatic"'
  with_dict: "{{ vars[VM_network] }}"
  tags: provission

- debug:
    var: current_ip
  tags: provission

- name: Loading set up for Virtual Machine. Assigning IP automatically, sockets, cores and memory for Virtual Machine
  shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A — ipconfig0 'ip={{ current_ip.stdout }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' — nameserver '{{ item.value.dnsservers }}' — searchdomain '{{ item.value.searchdomain }}' — memory '{{ VM_memory }}' — sockets '{{ VM_sockets }}' — cores '{{ VM_cores }}'
  when: '"{{ VM_IP }}" == "automatic"'
  with_dict: "{{ vars[VM_network] }}"
  tags: provission

- debug:
    var: "{{ PV_node }}"

- name: Migrating Virtual Machine if it is necessary
  shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}');qm migrate $A "{{ PV_node }}"
  when: '"{{ PV_node }}" != "none"'
  tags: provission

- name: starting new Virtual Machine in current proxmox node
  proxmox_kvm:
    api_user: "{{ vault_proxmox_user }}"
    api_token_id: "{{ vault_proxmox_token_id }}"
    api_token_secret: "{{ vault_proxmox_api_key }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ VM_name }}"
    node: "{{ proxmox_host }}"
    state: started
    timeout: 300
  when: '"{{ PV_node }}" == "none"'
  tags: provission
