---
- name: Deploy a new VM in Proxmox from a clone
  hosts: 192.168.0.250
  gather_facts: yes
  vars_files:
    - vault_vars.yml
    - vars.yml
  tasks:
  - name: Rebuild prep - Stop
    proxmox_kvm:
      api_user: "{{ vault_proxmox_user }}"
      api_password: "{{ vault_api_password }}"
      api_host: "TheIntersect"
      name: "{{ tower_user_name }}"
      node: "TheIntersect"
      state: stopped
    ignore_errors: True
    when: _awx_rebuild == "Yes"

  - name: Rebuild Prep
    proxmox_kvm:
      api_user: "{{ vault_proxmox_user }}"
      api_password: "{{ vault_api_password }}"
      api_host: "TheIntersect"
      name: "{{ tower_user_name }}"
      node: "TheIntersect"
      state: absent
    ignore_errors: True
    when: _awx_rebuild == "Yes"

  - name: Wait for Removal processes to finish
    wait_for:
      timeout: 5
    when: _awx_rebuild == "Yes"

  # Clone New VM from template in Proxmox
  - name: Cloning virtual machine from "{{ VM_template }}" with name "{{ tower_user_name }}"
    proxmox_kvm:
      api_user: "{{ vault_proxmox_user }}"
      api_password: "{{ vault_api_password }}"
      api_host: "TheIntersect"
      name: "{{ tower_user_name }}"
      node: "TheIntersect"
      storage: "biglocal"
      ostype: "l26"
      balloon: "1024"
      onboot: Yes
      localtime: Yes
      agent: Yes
      description: "Created With Ansible on: {{ ansible_date_time }} by: {{ tower_user_name }}."
      pool: "Playground"
      clone: "{{ VM_template }}"
      timeout: 300
    tags: provision,test

  - name: Waiting to apply cloud init changes in disk
    wait_for:
      timeout: 15
    tags: provision

  - name: Start the VM
    proxmox_kvm:
      api_user: "{{ vault_proxmox_user }}"
      api_password: "{{ vault_api_password }}"
      api_host: "TheIntersect"
      name: "{{ tower_user_name }}"
      node: "TheIntersect"
      state: started
      pool: "Playground"
      timeout: 300
    register: wait
    tags: provision

  - name: Waiting to start VM completely
    wait_for:
      timeout: 120
    when: wait.changed == true
    tags: provision

  - name: Getting the VM state to get the new VMs ID
    proxmox_kvm:
      api_user: "{{ vault_proxmox_user }}"
      api_password: "{{ vault_api_password }}"
      api_host: "TheIntersect"
      name: "{{ tower_user_name }}"
      node: "TheIntersect"
      state: current
    register: _current_state

  - name: Get New VM ID
    set_fact:
      _vmid: "{{ _current_state.msg | regex_search(regexp,'\\1') | first }}"
    vars:
      regexp: 'vmid = (\d*)'

  - name: get IP
    shell: "/usr/sbin/qm guest cmd {{ _vmid }} network-get-interfaces"
    become: True
    register: _output_vm_ip
    until: _output_vm_ip.stderr != "QEMU guest agent is not running"
    retries: 30
    delay: 10

  - set_fact:
      _ip_parse: "{{ _output_vm_ip.stdout | regex_findall(regexp,'\\1') | reject('search', '127.0.0.1') | list }}"
    vars:
      regexp: '"ip-address" : "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' 

  - add_host:
      name: '{{ _ip_parse | first }}'
      groups: "playground"

- name: Setup host for external access
  hosts: "{{ hostvars['192.168.0.250']['_ip_parse'] }}"
  gather_facts: no
  become: Yes
  vars_files:
    - vault_vars.yml
    - vars.yml
  tasks:
  - name: Wait for SSH to be ready (Max 10 minutes)
    wait_for_connection:
      delay: 10
      sleep: 5

  - name: Gathering facts
    setup:

  - name: Install packages
    yum: 
      name: "{{ item }}"
      state: present
      update_cache: Yes
    register: _app_wait
    until: _app_wait.msg != "yum lockfile is held by another process"
    retries: 40
    delay: 20
    with_items:
      - cockpit
      - NetworkManager-glib
      - nm-connection-editor.x86_64
      - libsemanage-python
      - policycoreutils-python
    when: 
      - ansible_distribution == "CentOS"

  - name: Install Cockpit
    apt: 
      name: "{{ item }}"
      state: present
      update_cache: Yes
    with_items:
      - cockpit
      - NetworkManager-glib
      - nm-connection-editor.x86_64
      - libsemanage-python
      - policycoreutils-python
      - libselinux-python
    when: 
      - ansible_distribution == "Ubuntu"

  - name: Enable Services
    systemd:
      name: "{{ item }}"
      enabled: Yes
      state: started
    with_items:
     - cockpit.socket
     - NetworkManager

  - name: Edit Cockpit config - Origin
    ini_file:
      path: /etc/cockpit/cockpit.conf
      section: WebService
      option: Origins
      value: "https://{{ tower_user_name }}.tatux.in wss://{{ tower_user_name }}.tatux.in"

  - name: Edit Cockpit config - ProtocolHeader
    ini_file:
      path: /etc/cockpit/cockpit.conf
      section: WebService
      option: ProtocolHeader
      value: X-Forwarded-Proto

  - name: Edit Cockpit config - LoginTitle
    ini_file:
      path: /etc/cockpit/cockpit.conf
      section: WebService
      option: LoginTitle
      value: "Welcome to your VM, supplied by the fabulious Nigel Tatschner"

  - name: Edit Cockpit config - AllowUnencrypted
    ini_file:
      path: /etc/cockpit/cockpit.conf
      section: WebService
      option: AllowUnencrypted
      value: true

  - name: Restart Cockpit Service
    systemd:
      name: cockpit.socket
      enabled: Yes
      state: restarted

  - name: Disable SELinux
    selinux:
      state: disabled

  - name: Set hostname
    hostname:
      name: "{{ tower_user_name }}"

  - name: Add Ansible SSH group
    group:
      name: "{{ remote_ansible_group }}"
      gid: '1111'
      state: present

  - name: "get the sshd_config content"
    slurp:
      src: "/etc/ssh/sshd_config"
    register: _sshd_config_file

  - name: "Grab the right line of the sshd_config file"
    set_fact:
      allowgroups_line: "{{ _sshd_config_file['content'] | b64decode | regex_search('AllowGroups.*')}}"
  - name: "extract the groups"
    set_fact:
      allowed_groups: "{{ allowgroups_line.split()[1:-1] }}"

  - name: "add the group to SSH AllowGroup"
    lineinfile:
      path: "/etc/ssh/sshd_config"
      state: present
      regexp: '(AllowGroups\s)(.*)'
      line: '\1\2 {{ remote_ansible_group }}'
      backrefs: yes
      validate: sshd -t -f %s

  - name: Create local user
    user:
      name: "{{ tower_user_name }}"
      comment: "VM owners account"
      groups: "{{ remote_ansible_group }}"
      password: "{{ _awx_vm_password | password_hash('sha512') }}"
      state: present

  - name: Add {{ tower_user_name }} to sudoers in the /etc/sudoers.d/ directory
    lineinfile:
      path: "/etc/sudoers.d/{{ tower_user_name }}"
      line: '{{ tower_user_name }} ALL=(ALL) NOPASSWD: ALL'
      state: present
      mode: 0440
      create: yes
      validate: 'visudo -cf %s'
      
  - name: "Configuring eth"
    nmcli:
      conn_name: "System eth0"
      ifname: eth0
      type: ethernet
      state: present
      autoconnect: yes
      ip4: "{{ hostvars['192.168.0.250']['_ip_parse'] | join(', ') }}"
      gw4: "192.168.0.1"

- name: Configure access to new VM via Traefik
  hosts: 127.0.0.1
  become: Yes
  vars_files:
  - vault_vars.yml
  - vars.yml
  tasks:
  - name: Create NFS user
    user:
      name: nikola
      uid: 1001
      state: present

  - name: Template IP output
    set_fact:
      _ip_address: "{{ hostvars['192.168.0.250']._ip_parse }}"

  - name: Creating inbound rules for Traefik Proxy
    become: Yes
    template:
      src: traefik-rules-file.j2
      dest: "/mnt/shared_data/{{ tower_user_name }}.yml"
      mode: 0760

  - name: "Email VM details"
    mail:
      host: "{{ smtp_hostname }}"
      username: "{{ smtp_username }}"
      password: "{{ smtp_password }}"
      port: "{{ smtp_port }}"
      to: "{{ _awx_email_address }}"
      from: "{{ smtp_username }}"
      subject: "VM Management Alerts"
      body: "{{ lookup('template', 'email-template.j2') }}"
    delegate_to: localhost
    #no_log: true